dockerfile- text file , contains commands to create an image
           docker build -t name
docker compose -tool allows to run multi - cotainer docker applications
--docker-compose up
--docker-compose down

*****vm's have os (complete isolation) which make them heavy in nature
containers dont have os , use resources from the kernel
container is a package = app + app. libraries + minimum system dependencies

Files and Folders in containers base images--------------------- these basic folders form logical isolation from one container to another
/bin: contains binary executable files, such as the ls, cp, and ps commands.
/sbin: contains system binary executable files, such as the init and shutdown commands.
/etc: contains configuration files for various system services.
/lib: contains library files that are used by the binary executables.
/usr: contains user-related files and utilities, such as applications, libraries, and documentation.
/var: contains variable data, such as log files, spool files, and temporary files.
/root: is the home directory of the root user.

Files and Folders that containers use from host operating system---------------------------------------
The host's file system: Docker containers can access the host file system using bind mounts, which allow the container to read and write files in the host file system.
Networking stack: The host's networking stack is used to provide network connectivity to the container. Docker containers can be connected to the host's network directly or through a virtual network.
System calls: The host's kernel handles system calls from the container, which is how the container accesses the host's resources, such as CPU, memory, and I/O.
Namespaces: Docker containers use Linux namespaces to create isolated environments for the container's processes. Namespaces provide isolation for resources such as the file system, process ID, and network.
Control groups (cgroups): Docker containers use cgroups to limit and control the amount of resources, such as CPU, memory, and I/O, that a container can access.
    
install docker -- docker deamon ( heart)
client --docker cli -- docker daemon --ensures to create requiremrnt

-------------------------------------------------------
CMD - overwrites
ENTRYPOINT - does not over write and append

vi Dockerfile
FROM centos
CMD ["echo" , "s1"]
ENTRYPOINT ["echo" , "s2"]

docker build -t v1 .
docker build -t v2 .
docker run v1 echo s11
s11
docker run v2 echo s22
s2 s22
-----------------------------------------------------
COPY - copy from source to dest
ADD - copies froms source and dest and can also download and copy to dest

touch 1.txt 2.txt

vi Dockerfile
FROM centos
COPY 1.txt /tmp
ADD 2.txt /tmp

docker build -t v1 .
docker run v1 /bin/bash
--------------------------------------------------------
